name: Deploy Pods and Services to EKS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1 # Replace with your AWS region
  CLUSTER_NAME: harisheks  # Replace with your EKS cluster name
  NAMESPACE: my-namespace  # Replace with your namespace

jobs: 
  deploy:
    name: Deploy Pod and Service
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: SSH into server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            # Commands to execute on the server after SSH connection
            echo "Connected to server"
            # Add your additional commands here

      - name: Get cluster credentials (assuming the created role has describe rights)
        id: get-credentials
        run: |
          cluster_name=harisheks
          aws eks describe-cluster --name $cluster_name | jq -r '.cluster.identity.arn' > cluster-identity-arn.txt

      - name: Assume role and store credentials (adapt based on your needs)
        run: |
          aws sts assume-role \
            --role-arn $(cat cluster-identity-arn.txt) \
            --role-session-name github-actions-eks-access \
            --output text | jq -r '.Credentials.AccessKeyId,.Credentials.SecretAccessKey,.Credentials.SessionToken' > eks-credentials.txt

      - name: Update Kubernetes cluster endpoint URL
        run: |
          kubectl config set-cluster harisheks --server=https://1E122A519D99993356246483D0C2739E.yl4.ap-south-1.eks.amazonaws.com --kubeconfig ~/.kube/config
          
      - name: Update kubeconfig with EKS credentials
        run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --kubeconfig ~/.kube/config

      - name: Use AWS CLI to interact with EKS (replace with your commands)
        run: |
          export AWS_ACCESS_KEY_ID=$(cat eks-credentials.txt | head -n 1)
          export AWS_SECRET_ACCESS_KEY=$(cat eks-credentials.txt | head -n 2 | tail -n 1)
          export AWS_SESSION_TOKEN=$(cat eks-credentials.txt | tail -n 1)

      - name: Verify kubeconfig
        run: kubectl config view

      - name: Apply deployment.yml
        run: kubectl apply -f deployment.yml -n my-namespace
